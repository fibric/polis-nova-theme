{
  "actions" : {
    "build" : {
      "enabled" : true,
      "script" : "#!\/bin\/sh\n\nif [[ \"$1\" =~ \\>[[:space:]]+(.*)$ ]]; then\n\tyarn stylus --disable-cache .\/Polis\/index.styl -o \"${BASH_REMATCH[1]}\"\nelse\n\techo \"ERROR: Arguments have changed! Check if the variables in the 'Arguments' tab are correct.\"\n\techo \"Excted the compile target value at position 1 in the 'Arguments' tab.\"\n\techo \"The format must be like this 'compile_target > path\/to\/file'\"\nfi\n"
    },
    "clean" : {
      "enabled" : true,
      "script" : "#!\/bin\/sh\n\n# delete Polis.novaextension folder\nif [[ \"$2\" =~ \\>[[:space:]]+(.*)$ ]]; then\n\trm -rf \"${BASH_REMATCH[1]}\"\nelse\n\techo \"ERROR: Arguments have changed! Check if the variables in the 'Arguments' tab are correct.\"\n\techo \"Excted the compile target value at position 1 in the 'Arguments' tab.\"\n\techo \"The format must be like this 'compile_target > path\/to\/file'\"\nfi\n\n# delete build folder\nif [[ \"$1\" =~ \\>[[:space:]]+(.*)\\\/.*$ ]]; then\n\trm -rf \"${BASH_REMATCH[1]}\"\nelse\n\techo \"ERROR: Arguments have changed! Check if the variables in the 'Arguments' tab are correct.\"\n\techo \"Excted the compile target value at position 1 in the 'Arguments' tab.\"\n\techo \"The format must be like this 'compile_target > path\/to\/file'\"\nfi\n"
    },
    "run" : {
      "enabled" : true,
      "script" : "#!\/usr\/bin\/env node\nconst {mkdirSync: mkdir, copyFileSync: cp, rmdir: rm, accessSync: access} = require('fs')\nconst { join, parse } = require('path')\nconst util = require('util')\n\nconst [,, css, package, curr_dir, ...files] = process.argv\n\n\/\/ splits string \"source > destination\" into [source, target]\nconst separate_left_right = (str) => {\n\tconst [left, right] = str.split(\/\\s+>\\s+\/)\n\treturn (right && right.length > 0)\n\t\t? { ok: true, left, right }\n\t\t: { error: true, left }\n}\n\n\/\/ splits dir \"\/path\/to\/file\" into \"\/path\/to\"\nconst extract_base_dir = (str) => {\n\tconst {dir} = parse(str)\n\treturn (dir && dir.length) > 0\n\t\t? { ok: true, base_dir: dir }\n\t\t: { error: true, file: str }\n}\n\n\/\/ extracting css compile target from task arguments\nconst {ok: css_ok = false, error: css_argv_error = false, right: css_dest} = separate_left_right(css)\n\/\/ task arguments have changed if we cant get the css destination from the css variable\nif (css_argv_error) {\n\tconsole.error('ERROR: Arguments have changed! Check if the variables in the \"Arguments\" tab are correct.')\n\tprocess.exit(1)\n}\n\n\/\/ extractiong package target from task arguments\nconst {ok: package_ok = false, error: package_argv_error, right: package_dest} = separate_left_right(package)\nif (package_argv_error) {\n\tconsole.error('ERROR: Arguments have changed! Check if the variables in the \"Arguments\" tab are correct.')\n\tprocess.exit(1)\n}\n\n\/\/ check if Themes.css has been compiled otherwise print hint message and exit(1)\ntry {\n\taccess(join(curr_dir, css_dest))\n} catch (err) {\n\tconsole.error(`ERROR: ${css_dest} not found! Run the \"Build\" tasks first.`)\n\tprocess.exit(1)\n}\n\n\/\/ copy files as defined in arguments tab\nmkdir(package_dest, {recursive: true})\nfor (file of files) {\n\tconst {ok: has_dest = false, error: has_no_dest = false, left: source = \"\", right: dest = \"\"} = separate_left_right(file)\n\tif(has_dest) {\n\t\tconst { ok: create_dir = false, error: is_file = false, file = \"\", base_dir = \"\" } = extract_base_dir(dest)\n\t\tif (create_dir) {\n\t\t\tmkdir(join(curr_dir, package_dest, base_dir), {recursive: true})\n\t\t}\n\t}\n\n\/\/ CHANGELOG.md\n\/\/ => { has_no_dest, source }\n\/\/ Themes\/Polis.css > Themes\/Polis.css\n\/\/ => { has_dest, source, dest, is_file }\n\/\/ Images\/logo\/extension@2x.png > extension@2x.png\n\/\/ => { has_dest, source, dest, create_dir, base_dir }\n\t\n\tif (has_no_dest) {\n\t\tcp(join(curr_dir, source), join(curr_dir, package_dest, source))\n\t} else {\n\t\tcp(join(curr_dir, source), join(curr_dir, package_dest, dest))\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    }
  },
  "arguments" : [
    "compile_target > build\/Polis.css",
    "package_target > ${WorkspaceName}",
    "${WorkspaceFolder}",
    "CHANGELOG.md",
    "extension.json",
    "LICENSE.md",
    "README.md",
    "Images\/logo\/extension.png > extension.png",
    "Images\/logo\/extension@2x.png > extension@2x.png",
    "build\/Polis.css > Themes\/Polis.css"
  ],
  "identifier" : "E168CF9C-B768-4FBE-A953-693F3259C45C",
  "openLogOnRun" : "fail"
}
